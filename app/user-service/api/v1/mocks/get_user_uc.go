// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/Victor-Acrani/user-api/app/user-service/api/v1"
	"github.com/Victor-Acrani/user-api/domain/entity"
	"sync"
)

// Ensure, that UserUseCaseMock does implement v1.UserUseCase.
// If this is not the case, regenerate this file with moq.
var _ v1.UserUseCase = &UserUseCaseMock{}

// UserUseCaseMock is a mock implementation of v1.UserUseCase.
//
//	func TestSomethingThatUsesUserUseCase(t *testing.T) {
//
//		// make and configure a mocked v1.UserUseCase
//		mockedUserUseCase := &UserUseCaseMock{
//			GetUserFunc: func(ctx context.Context, userID string) (entity.User, error) {
//				panic("mock out the GetUser method")
//			},
//		}
//
//		// use mockedUserUseCase in code that requires v1.UserUseCase
//		// and then make assertions.
//
//	}
type UserUseCaseMock struct {
	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, userID string) (entity.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
	}
	lockGetUser sync.RWMutex
}

// GetUser calls GetUserFunc.
func (mock *UserUseCaseMock) GetUser(ctx context.Context, userID string) (entity.User, error) {
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	if mock.GetUserFunc == nil {
		var (
			userOut entity.User
			errOut  error
		)
		return userOut, errOut
	}
	return mock.GetUserFunc(ctx, userID)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedUserUseCase.GetUserCalls())
func (mock *UserUseCaseMock) GetUserCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}
